<folder name="Santa">
  <service name="Sequencer" provision="sequencer"/>
  <service name="Santas" provision="expr">
    <prop name="expr.init.People" content-type="text/x-erlang"><![CDATA[
% The list of participants and the link to their private Slack channel. 
% See Slack docs on how to create an incoming webhook integration.
[
  {"Jacoby", "https://hooks.slack.com/services/..."},
  {"Yev", "https://hooks.slack.com/services/..."},
  {"Miklos", "https://hooks.slack.com/services/..."},
  {"Emily", "https://hooks.slack.com/services/..."},
  {"Mark", "https://hooks.slack.com/services/..."},
  {"Andrew", "https://hooks.slack.com/services/..."}
]
    ]]></prop>
    <prop name="expr.state" People="NewPeople"/>
    <prop name="expr.src" content-type="text/x-erlang"><![CDATA[
% Put the elements of a list in random order
Shuffle =
  fun(L) ->
    [X||{_,X} <- lists:sort([ {rand:uniform(), N} || N <- L])]
  end,
 
% Expects a tuple accumulator: {prev, List} where prev is the previous list element
% Pairs up previous and current element and adds them to List
% Returns the current element as prev and the appended List
Iterate =
  fun (Elem, Acc) ->
      {Prev, List} = Acc,
      Pair = [Prev, Elem],
      {Elem, List ++ [Pair]}
  end,
  
% Shuffles the input list, and calls the Iterate function on all elements
% Initital accumulator is the last element of the list and an empty list
PairRandomly = 
  fun(List) ->
    ShuffledList = Shuffle(List),
    LastElem = lists:nth(length(List), ShuffledList),
    {AccOut, MyPairs} = lists:foldl(Iterate, {LastElem, []}, ShuffledList),
    MyPairs
  end.
    ]]></prop>
  </service>
  <field name="START"/>
  <field name="all_pairs" type="term"/>
  <field name="start_url" type="utf8"/>
  <mix name="Mix">
    <notify name="Start" service="Sequencer" fields="START"/>
    <notify name="StartWithUrl" service="Sequencer" fields="start_url"/>
    <folder name="GetSanta">
      <request name="SetUrls" service="Santas" fields="start_url">
        <reply name="Ok" fields="START"/>
        <prop name="expr.src" content-type="text/x-erlang"><![CDATA[
% Set starting service states. All participants will get the same test URL, i.e. - all Slack messages are sent to this URL
NewPeople = [ setelement(2, X, get("start_url")) || X <- People],
"Ok".
        ]]></prop>
      </request>
      <request name="FormPairs" service="Santas" fields="START">
        <reply name="Ok" fields="all_pairs"/>
        <prop name="expr.src" content-type="text/x-erlang"><![CDATA[
% Pairs the participants randomly and updates the service state with the pairs
AllPairs = PairRandomly(People),
put("all_pairs", AllPairs),
"Ok".
        ]]></prop>
      </request>
    </folder>
    <folder name="SendSanta">
      <service name="LibSlack" provision="subr">
        <prop name="subr.import" key="lib.slack.Slack"/>
      </service>
      <field name="url" type="utf8"/>
      <field name="heading" type="utf8"/>
      <field name="map" type="json"/>
      <field name="colour" type="utf8"/>
      <field name="DONE"/>
      <consume name="BuildMessage" service="Santas" fields="all_pairs">
        <reply name="Ok" fields="all_pairs colour heading map url"/>
        <reply name="Done" fields="DONE"/>
        <prop name="expr.src" content-type="text/x-erlang"><![CDATA[
% Recursively chunk list of giver/recipient pairs
% Extract names and giver's URL
PairsIn = get("all_pairs"),

case PairsIn of
  
  % If done with list, send end state values
  % reset states and send Done reply
  [] ->
    "Done";
  
  % Otherwise get first giver/recipient pair in list
  _Otherwise ->
    % And bind tail of list to output field
    [Pair|PairsOut] = PairsIn,
    put("all_pairs", PairsOut),
    
    % Divide it into giver and recipient
    [Giver,Recipient] = Pair,
    
    % Extract name and URL of giver and recipient
    % Message will be sent to Santa(GiverName)'s Slack channel(GiverUrl)
    {GiverName, GiverUrl} = Giver,
    {RecipientName, RecipientUrl} = Recipient,
    put("url", GiverUrl),
    % Build heading of Slack message
    Heading =  u("Hey " ++
                GiverName ++
                "! Please be Santa and buy a present for " ++
                RecipientName ++ "!"),
    put("heading", Heading),

    % Set colour theme of Slack message
    put("colour", "green"),

    % Build fields for Slack message
    Message = #{"To"=>u(RecipientName), "From"=>u(GiverName)},
    put("map", Message),

    % Continue loop
    "Ok"
end.
        ]]></prop>
      </consume>
      <consume name="SendMessageUrl" service="LibSlack" fields="colour heading map url"/>
      <consume name="Done" service="Santas" fields="DONE"/>
    </folder>
  </mix>
</folder>